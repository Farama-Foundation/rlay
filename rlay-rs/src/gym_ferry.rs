// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `gym_grpc/gym_rlay.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:env.EnvID)
pub struct EnvID {
    // message fields
    // @@protoc_insertion_point(field:env.EnvID.env_id)
    pub env_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:env.EnvID.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EnvID {
    fn default() -> &'a EnvID {
        <EnvID as ::protobuf::Message>::default_instance()
    }
}

impl EnvID {
    pub fn new() -> EnvID {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "env_id",
            |m: &EnvID| { &m.env_id },
            |m: &mut EnvID| { &mut m.env_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EnvID>(
            "EnvID",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EnvID {
    const NAME: &'static str = "EnvID";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.env_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.env_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.env_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.env_id.is_empty() {
            os.write_string(1, &self.env_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EnvID {
        EnvID::new()
    }

    fn clear(&mut self) {
        self.env_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EnvID {
        static instance: EnvID = EnvID {
            env_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EnvID {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EnvID").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EnvID {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EnvID {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:env.Status)
pub struct Status {
    // message fields
    // @@protoc_insertion_point(field:env.Status.status)
    pub status: bool,
    // special fields
    // @@protoc_insertion_point(special_field:env.Status.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Status {
    fn default() -> &'a Status {
        <Status as ::protobuf::Message>::default_instance()
    }
}

impl Status {
    pub fn new() -> Status {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &Status| { &m.status },
            |m: &mut Status| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Status>(
            "Status",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Status {
    const NAME: &'static str = "Status";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.status = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.status != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.status != false {
            os.write_bool(1, self.status)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Status {
        Status::new()
    }

    fn clear(&mut self) {
        self.status = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Status {
        static instance: Status = Status {
            status: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Status {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Status").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Status {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Status {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:env.NumpyArray)
pub struct NumpyArray {
    // message fields
    // @@protoc_insertion_point(field:env.NumpyArray.data)
    pub data: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:env.NumpyArray.shape)
    pub shape: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:env.NumpyArray.dtype)
    pub dtype: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:env.NumpyArray.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NumpyArray {
    fn default() -> &'a NumpyArray {
        <NumpyArray as ::protobuf::Message>::default_instance()
    }
}

impl NumpyArray {
    pub fn new() -> NumpyArray {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &NumpyArray| { &m.data },
            |m: &mut NumpyArray| { &mut m.data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "shape",
            |m: &NumpyArray| { &m.shape },
            |m: &mut NumpyArray| { &mut m.shape },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "dtype",
            |m: &NumpyArray| { &m.dtype },
            |m: &mut NumpyArray| { &mut m.dtype },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NumpyArray>(
            "NumpyArray",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NumpyArray {
    const NAME: &'static str = "NumpyArray";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data = is.read_bytes()?;
                },
                18 => {
                    self.shape = is.read_bytes()?;
                },
                26 => {
                    self.dtype = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.data);
        }
        if !self.shape.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.shape);
        }
        if !self.dtype.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.dtype);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.data.is_empty() {
            os.write_bytes(1, &self.data)?;
        }
        if !self.shape.is_empty() {
            os.write_bytes(2, &self.shape)?;
        }
        if !self.dtype.is_empty() {
            os.write_string(3, &self.dtype)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NumpyArray {
        NumpyArray::new()
    }

    fn clear(&mut self) {
        self.data.clear();
        self.shape.clear();
        self.dtype.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NumpyArray {
        static instance: NumpyArray = NumpyArray {
            data: ::std::vec::Vec::new(),
            shape: ::std::vec::Vec::new(),
            dtype: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NumpyArray {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NumpyArray").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NumpyArray {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NumpyArray {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:env.NDArray)
pub struct NDArray {
    // message fields
    // @@protoc_insertion_point(field:env.NDArray.shape)
    pub shape: ::std::vec::Vec<i32>,
    // @@protoc_insertion_point(field:env.NDArray.data)
    pub data: ::std::vec::Vec<f32>,
    // @@protoc_insertion_point(field:env.NDArray.dtype)
    pub dtype: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:env.NDArray.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NDArray {
    fn default() -> &'a NDArray {
        <NDArray as ::protobuf::Message>::default_instance()
    }
}

impl NDArray {
    pub fn new() -> NDArray {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "shape",
            |m: &NDArray| { &m.shape },
            |m: &mut NDArray| { &mut m.shape },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "data",
            |m: &NDArray| { &m.data },
            |m: &mut NDArray| { &mut m.data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "dtype",
            |m: &NDArray| { &m.dtype },
            |m: &mut NDArray| { &mut m.dtype },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NDArray>(
            "NDArray",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NDArray {
    const NAME: &'static str = "NDArray";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_int32_into(&mut self.shape)?;
                },
                8 => {
                    self.shape.push(is.read_int32()?);
                },
                18 => {
                    is.read_repeated_packed_float_into(&mut self.data)?;
                },
                21 => {
                    self.data.push(is.read_float()?);
                },
                26 => {
                    self.dtype = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.shape {
            my_size += ::protobuf::rt::int32_size(1, *value);
        };
        my_size += 5 * self.data.len() as u64;
        if !self.dtype.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.dtype);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.shape {
            os.write_int32(1, *v)?;
        };
        for v in &self.data {
            os.write_float(2, *v)?;
        };
        if !self.dtype.is_empty() {
            os.write_string(3, &self.dtype)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NDArray {
        NDArray::new()
    }

    fn clear(&mut self) {
        self.shape.clear();
        self.data.clear();
        self.dtype.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NDArray {
        static instance: NDArray = NDArray {
            shape: ::std::vec::Vec::new(),
            data: ::std::vec::Vec::new(),
            dtype: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NDArray {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NDArray").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NDArray {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NDArray {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:env.Action)
pub struct Action {
    // message fields
    // @@protoc_insertion_point(field:env.Action.action)
    pub action: i32,
    // special fields
    // @@protoc_insertion_point(special_field:env.Action.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Action {
    fn default() -> &'a Action {
        <Action as ::protobuf::Message>::default_instance()
    }
}

impl Action {
    pub fn new() -> Action {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "action",
            |m: &Action| { &m.action },
            |m: &mut Action| { &mut m.action },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Action>(
            "Action",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Action {
    const NAME: &'static str = "Action";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.action = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.action != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.action);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.action != 0 {
            os.write_int32(1, self.action)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Action {
        Action::new()
    }

    fn clear(&mut self) {
        self.action = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Action {
        static instance: Action = Action {
            action: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Action {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Action").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Action {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Action {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:env.Seed)
pub struct Seed {
    // message fields
    // @@protoc_insertion_point(field:env.Seed.seed)
    pub seed: i32,
    // special fields
    // @@protoc_insertion_point(special_field:env.Seed.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Seed {
    fn default() -> &'a Seed {
        <Seed as ::protobuf::Message>::default_instance()
    }
}

impl Seed {
    pub fn new() -> Seed {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "seed",
            |m: &Seed| { &m.seed },
            |m: &mut Seed| { &mut m.seed },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Seed>(
            "Seed",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Seed {
    const NAME: &'static str = "Seed";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.seed = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.seed != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.seed);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.seed != 0 {
            os.write_int32(1, self.seed)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Seed {
        Seed::new()
    }

    fn clear(&mut self) {
        self.seed = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Seed {
        static instance: Seed = Seed {
            seed: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Seed {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Seed").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Seed {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Seed {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:env.Options)
pub struct Options {
    // message fields
    // @@protoc_insertion_point(field:env.Options.params)
    pub params: ::std::collections::HashMap<::std::string::String, ::protobuf::well_known_types::struct_::Value>,
    // special fields
    // @@protoc_insertion_point(special_field:env.Options.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Options {
    fn default() -> &'a Options {
        <Options as ::protobuf::Message>::default_instance()
    }
}

impl Options {
    pub fn new() -> Options {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "params",
            |m: &Options| { &m.params },
            |m: &mut Options| { &mut m.params },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Options>(
            "Options",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Options {
    const NAME: &'static str = "Options";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.params.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for (k, v) in &self.params {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for (k, v) in &self.params {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(10)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Options {
        Options::new()
    }

    fn clear(&mut self) {
        self.params.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Options {
        static instance: ::protobuf::rt::Lazy<Options> = ::protobuf::rt::Lazy::new();
        instance.get(Options::new)
    }
}

impl ::protobuf::MessageFull for Options {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Options").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Options {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Options {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:env.Info)
pub struct Info {
    // message fields
    // @@protoc_insertion_point(field:env.Info.params)
    pub params: ::std::collections::HashMap<::std::string::String, ::protobuf::well_known_types::struct_::Value>,
    // special fields
    // @@protoc_insertion_point(special_field:env.Info.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Info {
    fn default() -> &'a Info {
        <Info as ::protobuf::Message>::default_instance()
    }
}

impl Info {
    pub fn new() -> Info {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "params",
            |m: &Info| { &m.params },
            |m: &mut Info| { &mut m.params },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Info>(
            "Info",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Info {
    const NAME: &'static str = "Info";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.params.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for (k, v) in &self.params {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for (k, v) in &self.params {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(10)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Info {
        Info::new()
    }

    fn clear(&mut self) {
        self.params.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Info {
        static instance: ::protobuf::rt::Lazy<Info> = ::protobuf::rt::Lazy::new();
        instance.get(Info::new)
    }
}

impl ::protobuf::MessageFull for Info {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Info").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Info {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Info {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:env.ResetArgs)
pub struct ResetArgs {
    // message fields
    // @@protoc_insertion_point(field:env.ResetArgs.seed)
    pub seed: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:env.ResetArgs.options)
    pub options: ::std::collections::HashMap<::std::string::String, ::protobuf::well_known_types::struct_::Value>,
    // special fields
    // @@protoc_insertion_point(special_field:env.ResetArgs.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ResetArgs {
    fn default() -> &'a ResetArgs {
        <ResetArgs as ::protobuf::Message>::default_instance()
    }
}

impl ResetArgs {
    pub fn new() -> ResetArgs {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "seed",
            |m: &ResetArgs| { &m.seed },
            |m: &mut ResetArgs| { &mut m.seed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "options",
            |m: &ResetArgs| { &m.options },
            |m: &mut ResetArgs| { &mut m.options },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ResetArgs>(
            "ResetArgs",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ResetArgs {
    const NAME: &'static str = "ResetArgs";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.seed = ::std::option::Option::Some(is.read_int32()?);
                },
                18 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.options.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.seed {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        for (k, v) in &self.options {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.seed {
            os.write_int32(1, v)?;
        }
        for (k, v) in &self.options {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(18)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ResetArgs {
        ResetArgs::new()
    }

    fn clear(&mut self) {
        self.seed = ::std::option::Option::None;
        self.options.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ResetArgs {
        static instance: ::protobuf::rt::Lazy<ResetArgs> = ::protobuf::rt::Lazy::new();
        instance.get(ResetArgs::new)
    }
}

impl ::protobuf::MessageFull for ResetArgs {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ResetArgs").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ResetArgs {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResetArgs {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:env.StepReturn)
pub struct StepReturn {
    // message fields
    // @@protoc_insertion_point(field:env.StepReturn.obs)
    pub obs: ::protobuf::MessageField<NDArray>,
    // @@protoc_insertion_point(field:env.StepReturn.reward)
    pub reward: f32,
    // @@protoc_insertion_point(field:env.StepReturn.terminated)
    pub terminated: bool,
    // @@protoc_insertion_point(field:env.StepReturn.truncated)
    pub truncated: bool,
    // @@protoc_insertion_point(field:env.StepReturn.info)
    pub info: ::std::collections::HashMap<::std::string::String, ::protobuf::well_known_types::struct_::Value>,
    // special fields
    // @@protoc_insertion_point(special_field:env.StepReturn.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StepReturn {
    fn default() -> &'a StepReturn {
        <StepReturn as ::protobuf::Message>::default_instance()
    }
}

impl StepReturn {
    pub fn new() -> StepReturn {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, NDArray>(
            "obs",
            |m: &StepReturn| { &m.obs },
            |m: &mut StepReturn| { &mut m.obs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "reward",
            |m: &StepReturn| { &m.reward },
            |m: &mut StepReturn| { &mut m.reward },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "terminated",
            |m: &StepReturn| { &m.terminated },
            |m: &mut StepReturn| { &mut m.terminated },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "truncated",
            |m: &StepReturn| { &m.truncated },
            |m: &mut StepReturn| { &mut m.truncated },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "info",
            |m: &StepReturn| { &m.info },
            |m: &mut StepReturn| { &mut m.info },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StepReturn>(
            "StepReturn",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StepReturn {
    const NAME: &'static str = "StepReturn";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.obs)?;
                },
                21 => {
                    self.reward = is.read_float()?;
                },
                24 => {
                    self.terminated = is.read_bool()?;
                },
                32 => {
                    self.truncated = is.read_bool()?;
                },
                42 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.info.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.obs.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.reward != 0. {
            my_size += 1 + 4;
        }
        if self.terminated != false {
            my_size += 1 + 1;
        }
        if self.truncated != false {
            my_size += 1 + 1;
        }
        for (k, v) in &self.info {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.obs.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.reward != 0. {
            os.write_float(2, self.reward)?;
        }
        if self.terminated != false {
            os.write_bool(3, self.terminated)?;
        }
        if self.truncated != false {
            os.write_bool(4, self.truncated)?;
        }
        for (k, v) in &self.info {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(42)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StepReturn {
        StepReturn::new()
    }

    fn clear(&mut self) {
        self.obs.clear();
        self.reward = 0.;
        self.terminated = false;
        self.truncated = false;
        self.info.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StepReturn {
        static instance: ::protobuf::rt::Lazy<StepReturn> = ::protobuf::rt::Lazy::new();
        instance.get(StepReturn::new)
    }
}

impl ::protobuf::MessageFull for StepReturn {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StepReturn").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StepReturn {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StepReturn {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:env.GymnasiumMessage)
pub struct GymnasiumMessage {
    // message oneof groups
    pub message: ::std::option::Option<gymnasium_message::Message>,
    // special fields
    // @@protoc_insertion_point(special_field:env.GymnasiumMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GymnasiumMessage {
    fn default() -> &'a GymnasiumMessage {
        <GymnasiumMessage as ::protobuf::Message>::default_instance()
    }
}

impl GymnasiumMessage {
    pub fn new() -> GymnasiumMessage {
        ::std::default::Default::default()
    }

    // .env.StepReturn step_return = 1;

    pub fn step_return(&self) -> &StepReturn {
        match self.message {
            ::std::option::Option::Some(gymnasium_message::Message::StepReturn(ref v)) => v,
            _ => <StepReturn as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_step_return(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_step_return(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(gymnasium_message::Message::StepReturn(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_step_return(&mut self, v: StepReturn) {
        self.message = ::std::option::Option::Some(gymnasium_message::Message::StepReturn(v))
    }

    // Mutable pointer to the field.
    pub fn mut_step_return(&mut self) -> &mut StepReturn {
        if let ::std::option::Option::Some(gymnasium_message::Message::StepReturn(_)) = self.message {
        } else {
            self.message = ::std::option::Option::Some(gymnasium_message::Message::StepReturn(StepReturn::new()));
        }
        match self.message {
            ::std::option::Option::Some(gymnasium_message::Message::StepReturn(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_step_return(&mut self) -> StepReturn {
        if self.has_step_return() {
            match self.message.take() {
                ::std::option::Option::Some(gymnasium_message::Message::StepReturn(v)) => v,
                _ => panic!(),
            }
        } else {
            StepReturn::new()
        }
    }

    // .env.ResetArgs reset_args = 3;

    pub fn reset_args(&self) -> &ResetArgs {
        match self.message {
            ::std::option::Option::Some(gymnasium_message::Message::ResetArgs(ref v)) => v,
            _ => <ResetArgs as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_reset_args(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_reset_args(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(gymnasium_message::Message::ResetArgs(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_reset_args(&mut self, v: ResetArgs) {
        self.message = ::std::option::Option::Some(gymnasium_message::Message::ResetArgs(v))
    }

    // Mutable pointer to the field.
    pub fn mut_reset_args(&mut self) -> &mut ResetArgs {
        if let ::std::option::Option::Some(gymnasium_message::Message::ResetArgs(_)) = self.message {
        } else {
            self.message = ::std::option::Option::Some(gymnasium_message::Message::ResetArgs(ResetArgs::new()));
        }
        match self.message {
            ::std::option::Option::Some(gymnasium_message::Message::ResetArgs(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_reset_args(&mut self) -> ResetArgs {
        if self.has_reset_args() {
            match self.message.take() {
                ::std::option::Option::Some(gymnasium_message::Message::ResetArgs(v)) => v,
                _ => panic!(),
            }
        } else {
            ResetArgs::new()
        }
    }

    // .env.NDArray action = 4;

    pub fn action(&self) -> &NDArray {
        match self.message {
            ::std::option::Option::Some(gymnasium_message::Message::Action(ref v)) => v,
            _ => <NDArray as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_action(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_action(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(gymnasium_message::Message::Action(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_action(&mut self, v: NDArray) {
        self.message = ::std::option::Option::Some(gymnasium_message::Message::Action(v))
    }

    // Mutable pointer to the field.
    pub fn mut_action(&mut self) -> &mut NDArray {
        if let ::std::option::Option::Some(gymnasium_message::Message::Action(_)) = self.message {
        } else {
            self.message = ::std::option::Option::Some(gymnasium_message::Message::Action(NDArray::new()));
        }
        match self.message {
            ::std::option::Option::Some(gymnasium_message::Message::Action(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_action(&mut self) -> NDArray {
        if self.has_action() {
            match self.message.take() {
                ::std::option::Option::Some(gymnasium_message::Message::Action(v)) => v,
                _ => panic!(),
            }
        } else {
            NDArray::new()
        }
    }

    // bool close = 5;

    pub fn close(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(gymnasium_message::Message::Close(v)) => v,
            _ => false,
        }
    }

    pub fn clear_close(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_close(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(gymnasium_message::Message::Close(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_close(&mut self, v: bool) {
        self.message = ::std::option::Option::Some(gymnasium_message::Message::Close(v))
    }

    // bool request = 6;

    pub fn request(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(gymnasium_message::Message::Request(v)) => v,
            _ => false,
        }
    }

    pub fn clear_request(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_request(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(gymnasium_message::Message::Request(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_request(&mut self, v: bool) {
        self.message = ::std::option::Option::Some(gymnasium_message::Message::Request(v))
    }

    // bool status = 7;

    pub fn status(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(gymnasium_message::Message::Status(v)) => v,
            _ => false,
        }
    }

    pub fn clear_status(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_status(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(gymnasium_message::Message::Status(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: bool) {
        self.message = ::std::option::Option::Some(gymnasium_message::Message::Status(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, StepReturn>(
            "step_return",
            GymnasiumMessage::has_step_return,
            GymnasiumMessage::step_return,
            GymnasiumMessage::mut_step_return,
            GymnasiumMessage::set_step_return,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ResetArgs>(
            "reset_args",
            GymnasiumMessage::has_reset_args,
            GymnasiumMessage::reset_args,
            GymnasiumMessage::mut_reset_args,
            GymnasiumMessage::set_reset_args,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, NDArray>(
            "action",
            GymnasiumMessage::has_action,
            GymnasiumMessage::action,
            GymnasiumMessage::mut_action,
            GymnasiumMessage::set_action,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "close",
            GymnasiumMessage::has_close,
            GymnasiumMessage::close,
            GymnasiumMessage::set_close,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "request",
            GymnasiumMessage::has_request,
            GymnasiumMessage::request,
            GymnasiumMessage::set_request,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "status",
            GymnasiumMessage::has_status,
            GymnasiumMessage::status,
            GymnasiumMessage::set_status,
        ));
        oneofs.push(gymnasium_message::Message::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GymnasiumMessage>(
            "GymnasiumMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GymnasiumMessage {
    const NAME: &'static str = "GymnasiumMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.message = ::std::option::Option::Some(gymnasium_message::Message::StepReturn(is.read_message()?));
                },
                26 => {
                    self.message = ::std::option::Option::Some(gymnasium_message::Message::ResetArgs(is.read_message()?));
                },
                34 => {
                    self.message = ::std::option::Option::Some(gymnasium_message::Message::Action(is.read_message()?));
                },
                40 => {
                    self.message = ::std::option::Option::Some(gymnasium_message::Message::Close(is.read_bool()?));
                },
                48 => {
                    self.message = ::std::option::Option::Some(gymnasium_message::Message::Request(is.read_bool()?));
                },
                56 => {
                    self.message = ::std::option::Option::Some(gymnasium_message::Message::Status(is.read_bool()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.message {
            match v {
                &gymnasium_message::Message::StepReturn(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &gymnasium_message::Message::ResetArgs(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &gymnasium_message::Message::Action(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &gymnasium_message::Message::Close(v) => {
                    my_size += 1 + 1;
                },
                &gymnasium_message::Message::Request(v) => {
                    my_size += 1 + 1;
                },
                &gymnasium_message::Message::Status(v) => {
                    my_size += 1 + 1;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.message {
            match v {
                &gymnasium_message::Message::StepReturn(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &gymnasium_message::Message::ResetArgs(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &gymnasium_message::Message::Action(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &gymnasium_message::Message::Close(v) => {
                    os.write_bool(5, v)?;
                },
                &gymnasium_message::Message::Request(v) => {
                    os.write_bool(6, v)?;
                },
                &gymnasium_message::Message::Status(v) => {
                    os.write_bool(7, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GymnasiumMessage {
        GymnasiumMessage::new()
    }

    fn clear(&mut self) {
        self.message = ::std::option::Option::None;
        self.message = ::std::option::Option::None;
        self.message = ::std::option::Option::None;
        self.message = ::std::option::Option::None;
        self.message = ::std::option::Option::None;
        self.message = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GymnasiumMessage {
        static instance: GymnasiumMessage = GymnasiumMessage {
            message: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GymnasiumMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GymnasiumMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GymnasiumMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GymnasiumMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `GymnasiumMessage`
pub mod gymnasium_message {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:env.GymnasiumMessage.message)
    pub enum Message {
        // @@protoc_insertion_point(oneof_field:env.GymnasiumMessage.step_return)
        StepReturn(super::StepReturn),
        // @@protoc_insertion_point(oneof_field:env.GymnasiumMessage.reset_args)
        ResetArgs(super::ResetArgs),
        // @@protoc_insertion_point(oneof_field:env.GymnasiumMessage.action)
        Action(super::NDArray),
        // @@protoc_insertion_point(oneof_field:env.GymnasiumMessage.close)
        Close(bool),
        // @@protoc_insertion_point(oneof_field:env.GymnasiumMessage.request)
        Request(bool),
        // @@protoc_insertion_point(oneof_field:env.GymnasiumMessage.status)
        Status(bool),
    }

    impl ::protobuf::Oneof for Message {
    }

    impl ::protobuf::OneofFull for Message {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::GymnasiumMessage as ::protobuf::MessageFull>::descriptor().oneof_by_name("message").unwrap()).clone()
        }
    }

    impl Message {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Message>("message")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18gym_grpc/gym_rlay.proto\x12\x03env\x1a\x1cgoogle/protobuf/struct.\
    proto\"\x1e\n\x05EnvID\x12\x15\n\x06env_id\x18\x01\x20\x01(\tR\x05envId\
    \"\x20\n\x06Status\x12\x16\n\x06status\x18\x01\x20\x01(\x08R\x06status\"\
    L\n\nNumpyArray\x12\x12\n\x04data\x18\x01\x20\x01(\x0cR\x04data\x12\x14\
    \n\x05shape\x18\x02\x20\x01(\x0cR\x05shape\x12\x14\n\x05dtype\x18\x03\
    \x20\x01(\tR\x05dtype\"I\n\x07NDArray\x12\x14\n\x05shape\x18\x01\x20\x03\
    (\x05R\x05shape\x12\x12\n\x04data\x18\x02\x20\x03(\x02R\x04data\x12\x14\
    \n\x05dtype\x18\x03\x20\x01(\tR\x05dtype\"\x20\n\x06Action\x12\x16\n\x06\
    action\x18\x01\x20\x01(\x05R\x06action\"\x1a\n\x04Seed\x12\x12\n\x04seed\
    \x18\x01\x20\x01(\x05R\x04seed\"\x8e\x01\n\x07Options\x120\n\x06params\
    \x18\x01\x20\x03(\x0b2\x18.env.Options.ParamsEntryR\x06params\x1aQ\n\x0b\
    ParamsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12,\n\x05value\
    \x18\x02\x20\x01(\x0b2\x16.google.protobuf.ValueR\x05value:\x028\x01\"\
    \x88\x01\n\x04Info\x12-\n\x06params\x18\x01\x20\x03(\x0b2\x15.env.Info.P\
    aramsEntryR\x06params\x1aQ\n\x0bParamsEntry\x12\x10\n\x03key\x18\x01\x20\
    \x01(\tR\x03key\x12,\n\x05value\x18\x02\x20\x01(\x0b2\x16.google.protobu\
    f.ValueR\x05value:\x028\x01\"\xb8\x01\n\tResetArgs\x12\x17\n\x04seed\x18\
    \x01\x20\x01(\x05H\0R\x04seed\x88\x01\x01\x125\n\x07options\x18\x02\x20\
    \x03(\x0b2\x1b.env.ResetArgs.OptionsEntryR\x07options\x1aR\n\x0cOptionsE\
    ntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12,\n\x05value\x18\x02\
    \x20\x01(\x0b2\x16.google.protobuf.ValueR\x05value:\x028\x01B\x07\n\x05_\
    seed\"\x82\x02\n\nStepReturn\x12\x1e\n\x03obs\x18\x01\x20\x01(\x0b2\x0c.\
    env.NDArrayR\x03obs\x12\x16\n\x06reward\x18\x02\x20\x01(\x02R\x06reward\
    \x12\x1e\n\nterminated\x18\x03\x20\x01(\x08R\nterminated\x12\x1c\n\ttrun\
    cated\x18\x04\x20\x01(\x08R\ttruncated\x12-\n\x04info\x18\x05\x20\x03(\
    \x0b2\x19.env.StepReturn.InfoEntryR\x04info\x1aO\n\tInfoEntry\x12\x10\n\
    \x03key\x18\x01\x20\x01(\tR\x03key\x12,\n\x05value\x18\x02\x20\x01(\x0b2\
    \x16.google.protobuf.ValueR\x05value:\x028\x01\"\xf8\x01\n\x10GymnasiumM\
    essage\x122\n\x0bstep_return\x18\x01\x20\x01(\x0b2\x0f.env.StepReturnH\0\
    R\nstepReturn\x12/\n\nreset_args\x18\x03\x20\x01(\x0b2\x0e.env.ResetArgs\
    H\0R\tresetArgs\x12&\n\x06action\x18\x04\x20\x01(\x0b2\x0c.env.NDArrayH\
    \0R\x06action\x12\x16\n\x05close\x18\x05\x20\x01(\x08H\0R\x05close\x12\
    \x1a\n\x07request\x18\x06\x20\x01(\x08H\0R\x07request\x12\x18\n\x06statu\
    s\x18\x07\x20\x01(\x08H\0R\x06statusB\t\n\x07message2\x82\x01\n\x03Env\
    \x12'\n\nInitialize\x12\n.env.EnvID\x1a\x0b.env.Status\"\0\x12*\n\x05Res\
    et\x12\x0e.env.ResetArgs\x1a\x0f.env.StepReturn\"\0\x12&\n\x04Step\x12\
    \x0b.env.Action\x1a\x0f.env.StepReturn\"\0J\xed\x0f\n\x06\x12\x04\0\0P\
    \x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\t\n\x02\x03\0\x12\x03\x02\0&\n\
    \x08\n\x01\x02\x12\x03\x04\0\x0c\n\n\n\x02\x06\0\x12\x04\x06\0\x0e\x01\n\
    \n\n\x03\x06\0\x01\x12\x03\x06\x08\x0b\n\x0b\n\x04\x06\0\x02\0\x12\x03\
    \x08\x02+\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x08\x06\x10\n\x0c\n\x05\
    \x06\0\x02\0\x02\x12\x03\x08\x11\x16\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\
    \x08!'\n\x0b\n\x04\x06\0\x02\x01\x12\x03\n\x02.\n\x0c\n\x05\x06\0\x02\
    \x01\x01\x12\x03\n\x06\x0b\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\n\x0c\
    \x15\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\n\x20*\n\x0b\n\x04\x06\0\x02\
    \x02\x12\x03\x0c\x02*\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\x0c\x06\n\n\
    \x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x0c\x0b\x11\n\x0c\n\x05\x06\0\x02\
    \x02\x03\x12\x03\x0c\x1c&\n\n\n\x02\x04\0\x12\x04\x11\0\x13\x01\n\n\n\
    \x03\x04\0\x01\x12\x03\x11\x08\r\n\x0b\n\x04\x04\0\x02\0\x12\x03\x12\x02\
    \x14\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x12\x02\x08\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x03\x12\t\x0f\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x12\x12\
    \x13\n\n\n\x02\x04\x01\x12\x04\x15\0\x17\x01\n\n\n\x03\x04\x01\x01\x12\
    \x03\x15\x08\x0e\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x16\x02\x12\n\x0c\n\
    \x05\x04\x01\x02\0\x05\x12\x03\x16\x02\x06\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03\x16\x07\r\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x16\x10\x11\n\n\
    \n\x02\x04\x02\x12\x04\x19\0\x1d\x01\n\n\n\x03\x04\x02\x01\x12\x03\x19\
    \x08\x12\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x1a\x04\x13\n\x0c\n\x05\x04\
    \x02\x02\0\x05\x12\x03\x1a\x04\t\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\
    \x1a\n\x0e\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x1a\x11\x12\n\x0b\n\x04\
    \x04\x02\x02\x01\x12\x03\x1b\x04\x14\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\
    \x03\x1b\x04\t\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x1b\n\x0f\n\x0c\n\
    \x05\x04\x02\x02\x01\x03\x12\x03\x1b\x12\x13\n\x0b\n\x04\x04\x02\x02\x02\
    \x12\x03\x1c\x04\x15\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03\x1c\x04\n\n\
    \x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x1c\x0b\x10\n\x0c\n\x05\x04\x02\
    \x02\x02\x03\x12\x03\x1c\x13\x14\n\n\n\x02\x04\x03\x12\x04\x1f\0#\x01\n\
    \n\n\x03\x04\x03\x01\x12\x03\x1f\x08\x0f\n\x0b\n\x04\x04\x03\x02\0\x12\
    \x03\x20\x02\x1b\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03\x20\x02\n\n\x0c\n\
    \x05\x04\x03\x02\0\x05\x12\x03\x20\x0b\x10\n\x0c\n\x05\x04\x03\x02\0\x01\
    \x12\x03\x20\x11\x16\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x20\x19\x1a\n\
    \x0b\n\x04\x04\x03\x02\x01\x12\x03!\x02\x1a\n\x0c\n\x05\x04\x03\x02\x01\
    \x04\x12\x03!\x02\n\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03!\x0b\x10\n\
    \x0c\n\x05\x04\x03\x02\x01\x01\x12\x03!\x11\x15\n\x0c\n\x05\x04\x03\x02\
    \x01\x03\x12\x03!\x18\x19\n\x0b\n\x04\x04\x03\x02\x02\x12\x03\"\x02\x13\
    \n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03\"\x02\x08\n\x0c\n\x05\x04\x03\
    \x02\x02\x01\x12\x03\"\t\x0e\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03\"\
    \x11\x12\n\n\n\x02\x04\x04\x12\x04%\0'\x01\n\n\n\x03\x04\x04\x01\x12\x03\
    %\x08\x0e\n\x0b\n\x04\x04\x04\x02\0\x12\x03&\x02\x13\n\x0c\n\x05\x04\x04\
    \x02\0\x05\x12\x03&\x02\x07\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03&\x08\
    \x0e\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03&\x11\x12\n\n\n\x02\x04\x05\
    \x12\x04)\0+\x01\n\n\n\x03\x04\x05\x01\x12\x03)\x08\x0c\n\x0b\n\x04\x04\
    \x05\x02\0\x12\x03*\x02\x11\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03*\x02\
    \x07\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03*\x08\x0c\n\x0c\n\x05\x04\x05\
    \x02\0\x03\x12\x03*\x0f\x10\n\n\n\x02\x04\x06\x12\x04-\0/\x01\n\n\n\x03\
    \x04\x06\x01\x12\x03-\x08\x0f\n\x0b\n\x04\x04\x06\x02\0\x12\x03.\x020\n\
    \x0c\n\x05\x04\x06\x02\0\x06\x12\x03.\x02$\n\x0c\n\x05\x04\x06\x02\0\x01\
    \x12\x03.%+\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03../\n\n\n\x02\x04\x07\
    \x12\x041\03\x01\n\n\n\x03\x04\x07\x01\x12\x031\x08\x0c\n\x0b\n\x04\x04\
    \x07\x02\0\x12\x032\x020\n\x0c\n\x05\x04\x07\x02\0\x06\x12\x032\x02$\n\
    \x0c\n\x05\x04\x07\x02\0\x01\x12\x032%+\n\x0c\n\x05\x04\x07\x02\0\x03\
    \x12\x032./\n\n\n\x02\x04\x08\x12\x045\08\x01\n\n\n\x03\x04\x08\x01\x12\
    \x035\x08\x11\n\x0b\n\x04\x04\x08\x02\0\x12\x036\x02\x1a\n\x0c\n\x05\x04\
    \x08\x02\0\x04\x12\x036\x02\n\n\x0c\n\x05\x04\x08\x02\0\x05\x12\x036\x0b\
    \x10\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x036\x11\x15\n\x0c\n\x05\x04\x08\
    \x02\0\x03\x12\x036\x18\x19\n\x0b\n\x04\x04\x08\x02\x01\x12\x037\x021\n\
    \x0c\n\x05\x04\x08\x02\x01\x06\x12\x037\x02$\n\x0c\n\x05\x04\x08\x02\x01\
    \x01\x12\x037%,\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\x037/0\nf\n\x02\x04\
    \t\x12\x04?\0E\x012Zmessage\x20ResetReturn\x20{\n\x20\x20NDArray\x20obs\
    \x20=\x201;\n\x20\x20map<string,\x20google.protobuf.Value>\x20info\x20=\
    \x202;\n}\n\n\n\n\x03\x04\t\x01\x12\x03?\x08\x12\n\x0b\n\x04\x04\t\x02\0\
    \x12\x03@\x02\x12\n\x0c\n\x05\x04\t\x02\0\x06\x12\x03@\x02\t\n\x0c\n\x05\
    \x04\t\x02\0\x01\x12\x03@\n\r\n\x0c\n\x05\x04\t\x02\0\x03\x12\x03@\x10\
    \x11\n\x0b\n\x04\x04\t\x02\x01\x12\x03A\x02\x13\n\x0c\n\x05\x04\t\x02\
    \x01\x05\x12\x03A\x02\x07\n\x0c\n\x05\x04\t\x02\x01\x01\x12\x03A\x08\x0e\
    \n\x0c\n\x05\x04\t\x02\x01\x03\x12\x03A\x11\x12\n\x0b\n\x04\x04\t\x02\
    \x02\x12\x03B\x02\x16\n\x0c\n\x05\x04\t\x02\x02\x05\x12\x03B\x02\x06\n\
    \x0c\n\x05\x04\t\x02\x02\x01\x12\x03B\x07\x11\n\x0c\n\x05\x04\t\x02\x02\
    \x03\x12\x03B\x14\x15\n\x0b\n\x04\x04\t\x02\x03\x12\x03C\x02\x15\n\x0c\n\
    \x05\x04\t\x02\x03\x05\x12\x03C\x02\x06\n\x0c\n\x05\x04\t\x02\x03\x01\
    \x12\x03C\x07\x10\n\x0c\n\x05\x04\t\x02\x03\x03\x12\x03C\x13\x14\n\x0b\n\
    \x04\x04\t\x02\x04\x12\x03D\x02.\n\x0c\n\x05\x04\t\x02\x04\x06\x12\x03D\
    \x02$\n\x0c\n\x05\x04\t\x02\x04\x01\x12\x03D%)\n\x0c\n\x05\x04\t\x02\x04\
    \x03\x12\x03D,-\n\n\n\x02\x04\n\x12\x04G\0P\x01\n\n\n\x03\x04\n\x01\x12\
    \x03G\x08\x18\n\x0c\n\x04\x04\n\x08\0\x12\x04H\x02O\x03\n\x0c\n\x05\x04\
    \n\x08\0\x01\x12\x03H\x08\x0f\n\x0b\n\x04\x04\n\x02\0\x12\x03I\x04\x1f\n\
    \x0c\n\x05\x04\n\x02\0\x06\x12\x03I\x04\x0e\n\x0c\n\x05\x04\n\x02\0\x01\
    \x12\x03I\x0f\x1a\n\x0c\n\x05\x04\n\x02\0\x03\x12\x03I\x1d\x1e\n\x0b\n\
    \x04\x04\n\x02\x01\x12\x03J\x04\x1d\n\x0c\n\x05\x04\n\x02\x01\x06\x12\
    \x03J\x04\r\n\x0c\n\x05\x04\n\x02\x01\x01\x12\x03J\x0e\x18\n\x0c\n\x05\
    \x04\n\x02\x01\x03\x12\x03J\x1b\x1c\n\x0b\n\x04\x04\n\x02\x02\x12\x03K\
    \x04\x17\n\x0c\n\x05\x04\n\x02\x02\x06\x12\x03K\x04\x0b\n\x0c\n\x05\x04\
    \n\x02\x02\x01\x12\x03K\x0c\x12\n\x0c\n\x05\x04\n\x02\x02\x03\x12\x03K\
    \x15\x16\n\x0b\n\x04\x04\n\x02\x03\x12\x03L\x04\x13\n\x0c\n\x05\x04\n\
    \x02\x03\x05\x12\x03L\x04\x08\n\x0c\n\x05\x04\n\x02\x03\x01\x12\x03L\t\
    \x0e\n\x0c\n\x05\x04\n\x02\x03\x03\x12\x03L\x11\x12\n\x0b\n\x04\x04\n\
    \x02\x04\x12\x03M\x04\x15\n\x0c\n\x05\x04\n\x02\x04\x05\x12\x03M\x04\x08\
    \n\x0c\n\x05\x04\n\x02\x04\x01\x12\x03M\t\x10\n\x0c\n\x05\x04\n\x02\x04\
    \x03\x12\x03M\x13\x14\n\x0b\n\x04\x04\n\x02\x05\x12\x03N\x04\x14\n\x0c\n\
    \x05\x04\n\x02\x05\x05\x12\x03N\x04\x08\n\x0c\n\x05\x04\n\x02\x05\x01\
    \x12\x03N\t\x0f\n\x0c\n\x05\x04\n\x02\x05\x03\x12\x03N\x12\x13b\x06proto\
    3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::well_known_types::struct_::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(11);
            messages.push(EnvID::generated_message_descriptor_data());
            messages.push(Status::generated_message_descriptor_data());
            messages.push(NumpyArray::generated_message_descriptor_data());
            messages.push(NDArray::generated_message_descriptor_data());
            messages.push(Action::generated_message_descriptor_data());
            messages.push(Seed::generated_message_descriptor_data());
            messages.push(Options::generated_message_descriptor_data());
            messages.push(Info::generated_message_descriptor_data());
            messages.push(ResetArgs::generated_message_descriptor_data());
            messages.push(StepReturn::generated_message_descriptor_data());
            messages.push(GymnasiumMessage::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
